// src/app/dashboard.tsx
import React, { useMemo } from 'react';
import { ScrollView, StyleSheet, View } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import ScreenLayout from '../components/ScreenLayout';
import { Colors } from '../utils/theme';
import { formatCompactCurrency } from '../utils/currency';

// Import dashboard widgets
import WelcomeHeader from '../components/dashboard/WelcomeHeader';
import SummaryCard from '../components/dashboard/SummaryCard';
import LatestTransactions, { Txn } from '../components/dashboard/LatestTransactions';
import QuickActions from '../components/dashboard/QuickActions';
import { useStorage } from '../services/storage/StorageProvider';
import type { TransactionRecord } from '../types/transactions';


export default function DashboardScreen() {
  // Hook into global storage
  const { state } = useStorage();

  // 1) Cash totals
  const cashEntries = (state?.cashEntries ?? []) as Array<{
    amount: { amount: number; currency: string };
    type: string;
    timestamp: string | Date;
    description?: string;
    cashCategory?: string;
    expenseCategory?: string;
    notes?: string;
    id: string;
  }>;
  const liquidCashINR = useMemo(
    () => cashEntries.reduce((sum, e) => sum + (e.amount?.amount ?? 0), 0),
    [cashEntries]
  );

  // 2) Bank accounts total balance
  const accounts = (state?.accounts ?? []) as Array<{
    id: string;
    nickname: string;
    bankName: string;
    accountNumberMasked: string;
    type: string;
    balance: { amount: number; currency: string };
    transactions?: Array<{
      id: string;
      datetime: string | Date;
      amount: { amount: number; currency: string };
      description: string;
      type: string;
      notes?: string;
      source?: string;
      status?: string;
    }>;
  }>;
  const accountsTotalINR = useMemo(
    () => accounts.reduce((sum, a) => sum + (a.balance?.amount ?? 0), 0),
    [accounts]
  );

  // 3) For now, liabilities and investments placeholders (to be wired in later phases)
  const liabilitiesINR = 0;     // loans + credit cards totals will fill this
  const invAndRecvINR = 0;      // investments + receivables totals will fill this

  // 4) Net worth per verified formula:
  // Net Worth = (bankAccounts + crypto + investments + physicalAssets) - (loans + creditCardBalances)
  // For now, only bank accounts contribute positively; others will be added when ready
  const netWorthINR = useMemo(
    () => accountsTotalINR - liabilitiesINR + invAndRecvINR, 
    [accountsTotalINR, liabilitiesINR, invAndRecvINR]
  );


  const summaryData = useMemo(() => [
    { 
      id: 's1', 
      label: 'Your liquid cash balance', 
      valueText: formatCompactCurrency(liquidCashINR, 'INR'), 
      accentColor: '#2F80ED' 
    },
    { 
      id: 's2', 
      label: 'Your total net worth', 
      valueText: formatCompactCurrency(netWorthINR, 'INR'), 
      accentColor: '#10B981' 
    },
    { 
      id: 's3', 
      label: 'Your total liabilities', 
      valueText: formatCompactCurrency(liabilitiesINR, 'INR'), 
      accentColor: '#EF4444' 
    },
    { 
      id: 's4', 
      label: 'Your Investments & receivables', 
      valueText: formatCompactCurrency(invAndRecvINR, 'INR'), 
      accentColor: '#8B5CF6' 
    },
  ], [liquidCashINR, netWorthINR, liabilitiesINR, invAndRecvINR]);

  // Build a unified last N transactions view from cash + accounts
  const latestTxns: Txn[] = useMemo(() => {
    const cashTxns = cashEntries.map(e => ({
      id: e.id,
      title: e.description || e.cashCategory || 'Cash',
      date: new Date(e.timestamp).toDateString(),
      status: 'Success' as const,
      amount: e.amount.amount,
      currency: 'INR' as const, // Force literal type
    }));

    const accountTxns = accounts.flatMap(acc => (acc.transactions ?? []).map(tx => ({
      id: tx.id,
      title: tx.description || `${acc.nickname} ${acc.accountNumberMasked}`,
      date: new Date(tx.datetime).toDateString(),
      status: (tx.status as 'Success' | 'Pending' | 'Failed') || 'Success',
      amount: tx.amount.amount,
      currency: 'INR' as const, // Force literal type
    })));

    return [...cashTxns, ...accountTxns]
      .sort((a, b) => +new Date(b.date) - +new Date(a.date))
      .slice(0, 6);
  }, [cashEntries, accounts]);



  const quickActions = [
    { id: 'qa1', icon: 'document-scanner', label: 'Scan receipts' },
    { id: 'qa2', icon: 'upload-file', label: 'Upload Statements' },
    { id: 'qa3', icon: 'sms', label: 'Scan SMS' },
    { id: 'qa4', icon: 'email', label: 'Scan Emails' },
    { id: 'qa5', icon: 'add-circle', label: 'Add Cash' },
  ];

  return (
    <ScreenLayout>
      <StatusBar style="dark" backgroundColor={Colors.background.primary} />
      <ScrollView 
        style={styles.scroll} 
        contentContainerStyle={styles.scrollContent} 
        showsVerticalScrollIndicator={false}
      >
        <WelcomeHeader name="Donna" email="hello@reallygreatsite.com" />
        
        <View style={styles.summaryGrid}>
          {summaryData.map(item => (
            <SummaryCard
              key={item.id}
              label={item.label}
              valueText={item.valueText}
              accentColor={item.accentColor}
            />
          ))}
        </View>
        
        <LatestTransactions transactions={latestTxns} />
        
        <QuickActions actions={quickActions} />
      </ScrollView>
    </ScreenLayout>
  );
}

const styles = StyleSheet.create({
  scroll: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 120, // Extra space for persistent menu button
  },
  summaryGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    paddingHorizontal: 16,
    marginTop: 16,
    justifyContent: 'space-between',
  },
});
